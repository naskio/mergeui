[tool.poetry]
name = "mergeui"
packages = [
    { include = "cli", from = "mergeui" },
    { include = "core", from = "mergeui" },
    { include = "repositories", from = "mergeui" },
    { include = "services", from = "mergeui" },
    { include = "utils", from = "mergeui" },
    { include = "web", from = "mergeui" },
]
version = "0.1.0"
description = "UI for merged large language models"
authors = ["Mehdi Nassim KHODJA <18899702+naskio@users.noreply.github.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "~3.9"
loguru = "^0.7.2"
pyyaml = "^6.0.1"
huggingface-hub = { extras = ["hf-transfer"], version = "^0.23.0" }
gradio = "^4.27.0"
fastapi = "^0.110.2"
uvicorn = { extras = ["standard"], version = "^0.29.0" }
pydantic = { extras = ["email"], version = "^2.7.1" }
pydantic-settings = "^2.2.1"
gqlalchemy = { extras = ["all"], version = "^1.5.1" }
redis = { extras = ["hiredis"], version = "^5.0.4" }
rq = "^1.16.2"
whoosh = "^2.7.4"
networkx = "^2.8.8"
pydot = "^2.0.0"
bokeh = "~3.3"
numerize = "^0.12"

[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
pytest-ordering = "^0.6"
pytest-env = "^1.1.3"
rq-dashboard = "^0.7.0.2"
poethepoet = "^0.25.1"
deptry = "^0.16.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = ["mergeui"]
env = [
    "ENV=test",
    "DATABASE_URL=bolt://localhost:7688",
    "LOGGING_LEVEL=INFO",
    "MEMGRAPH_TEXT_SEARCH_DISABLED=true",
    "TEXT_INDEX_NAME=modelDocumentsForTesting",
]

[tool.poe.tasks]
test = { cmd = "pytest", help = "run tests using pytest" }
load_test_data = { script = "cli.load_test_data:main", help = "Load test data" }
reset_db = { script = "cli.reset_db:main", help = "Reset the database" }
text_search_index = { script = "cli.text_search_index:main(force)", args = [{ name = "force", default = true, type = "boolean" }], help = "Create text-search index" }
reset_text_search_index = { script = "cli.reset_text_search_index:main", help = "Reset text-search index" }
index = { script = "cli.index:main(limit, reset_db, save_json,local_files_only)", args = [{ name = "limit", default = 100000, type = "integer" }, { name = "reset_db", default = true, type = "boolean" }, { name = "save_json", default = true, type = "boolean" }, { name = "local_files_only", default = false, type = "boolean" }], help = "Index data from HF Hub" }
worker = { script = "cli.worker:main(queues=queues)", args = [{ name = "queues", default = "default" }], help = "Run custom RQ worker" }
worker_pool = { script = "cli.worker_pool:main(queues=queues,num_workers=n)", args = [{ name = "queues", default = "default" }, { name = "n", default = 1, type = "integer" }], help = "Run custom RQ worker-pool" }
# dev mode
bokeh_dev = { cmd = "bokeh serve mergeui/cli/bokeh_dev.py --dev", help = "Run bokeh dev server" }
gradio_dev = { cmd = "gradio mergeui/web/gradio_app/main.py", help = "Run the Gradio UI in dev mode" }
# others
start = { script = "mergeui.main:start_server", help = "start FastAPI server" }
